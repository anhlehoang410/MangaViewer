using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Navigation;
using MangaViewer.Foundation.Common;
using MangaViewer.Model;
using MangaViewer.ViewModel;
using System.Collections.ObjectModel;
using MangaViewer.Service;

namespace MangaViewer.View
{
    /// <summary>
    /// A basic page that provides characteristics common to most applications.
    /// </summary>
    public sealed partial class ChapterPage : LayoutAwarePage
    {
        Dictionary<string, object> currentPageState;
        public ChapterPage()
        {
            this.InitializeComponent();
            this.Loaded += MainPage_Loaded;
            
        }

        /// <summary>
        /// Populates the page with content passed during navigation.  Any saved state is also
        /// provided when recreating a page from a prior session.
        /// </summary>
        /// <param name="navigationParameter">The parameter value passed to
        /// <see cref="Frame.Navigate(Type, Object)"/> when this page was initially requested.
        /// </param>
        /// <param name="pageState">A dictionary of state preserved by this page during an earlier
        /// session.  This will be null the first time a page is visited.</param>
        protected override void LoadState(Object navigationParameter, Dictionary<String, Object> pageState)
        {
            currentPageState = pageState;
            HubMenuItem menuItem = navigationParameter as HubMenuItem;
            int index = menuItem.Title.IndexOf(' ');
            if (index > 0)
            {
                menuItem.Title = menuItem.Title.Substring(0, index);
            }
            
            pageTitle.Text = menuItem.Title;
            
        }
        void MainPage_Loaded(object sender, RoutedEventArgs e)
        {
            #region 恢复GridView的ScrollBar到上次位置
            if (currentPageState != null && currentPageState.ContainsKey("HorizontalScrollPosition"))
            {
                ScrollViewer gridScrollViewer = VisualTreeExtensions.FindVisualChild<ScrollViewer>(this.ChapterListGridView);

                double HorizontalScrollPosition = double.Parse(currentPageState["HorizontalScrollPosition"].ToString());

                //分组的GridView的ScrollableWidth会随着 ScrollBar 的变化而变化，所以 ScrollToHorizontalOffset 一次并
                //不一定能定位到之前保存的位置，需要多次定位才能恢复到原有位置
                while (gridScrollViewer.HorizontalOffset < HorizontalScrollPosition * 0.95)
                {
                    gridScrollViewer.ScrollToHorizontalOffset(HorizontalScrollPosition);
                    gridScrollViewer.UpdateLayout();
                }

                //double HorizontalScrollPosition = double.Parse(currentPageState["HorizontalScrollPosition"].ToString());
                //PageScrollViewer.ScrollToHorizontalOffset(HorizontalScrollPosition);
            }
            #endregion
        }
        protected override void OnNavigatedTo(NavigationEventArgs e)
        {
            if (e.NavigationMode == NavigationMode.Back)
            {
                LoadingStack.Visibility = Visibility.Collapsed;
            }
            else
            {
                ViewModelLocator.AppViewModel.Main.ChapterList = null;
                GetChatperList();
            }
            base.OnNavigatedTo(e);
        }
        /// <summary>
        /// Preserves state associated with this page in case the application is suspended or the
        /// page is discarded from the navigation cache.  Values must conform to the serialization
        /// requirements of <see cref="SuspensionManager.SessionState"/>.
        /// </summary>
        /// <param name="pageState">An empty dictionary to be populated with serializable state.</param>
        protected override void SaveState(Dictionary<String, Object> pageState)
        {
            ScrollViewer gridScrollViewer = VisualTreeExtensions.FindVisualChild<ScrollViewer>(this.ChapterListGridView);
            pageState["HorizontalScrollPosition"] = gridScrollViewer.HorizontalOffset;
        }

        async void GetChatperList()
        {
            //有网络
            ObservableCollection<MangaChapterItem> chapterItem = await MangaService.GetChapterList(ViewModelLocator.AppViewModel.Main.SelectedMenu);
            LoadingStack.Visibility = Visibility.Collapsed;
            ViewModelLocator.AppViewModel.Main.ChapterList = chapterItem;

            ////没网络
            //ViewModelLocator.AppViewModel.Main.PageList = new MangaViewer.Data.PageListData().PageList;
        }

        private async void FavouriteButton_Click(object sender, RoutedEventArgs e)
        {
            MangaMenuItem menu = ViewModelLocator.AppViewModel.Main.SelectedMenu;
            await Dispatcher.RunAsync(Windows.UI.Core.CoreDispatcherPriority.Normal,new Windows.UI.Core.DispatchedHandler(async () =>
            {
<<<<<<< .merge_file_a30396
                MangaMenuItem newMangaItem = menu.Clone();

                SettingService.AddFavouriteMenu(newMangaItem);
=======
                //MangaMenuItem newMangaItem = CommonService.Clone<MangaMenuItem>(menu);
                ViewModelLocator.AppViewModel.Main.MenuGroups.Last().Items.Add(menu);
                SettingService.AddFavouriteMenu(menu);
>>>>>>> .merge_file_a31236
            }));
            

        }
    }
}
